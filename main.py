import streamlit as st
import plotly.graph_objects as go

from compass_api_sdk import CompassAPI
from compass_api_sdk.models import Chain, TokenEnum, TokenAddressToken, MorphoVault
from dotenv import load_dotenv
import os

load_dotenv()


compass = CompassAPI(
    api_key_auth=os.environ.get("COMPASS_KEY"),
)


st.set_page_config(layout="wide")
address = st.text_input(
    label="Choose the deposit address",
    value="0xa829B388A3DF7f581cE957a95edbe419dd146d1B",
)
chain = st.selectbox(
    label="Chain", options=[Chain.ETHEREUM_MAINNET, Chain.ARBITRUM_MAINNET]
)


address2vault: dict[str, MorphoVault] = {
    vault.address for vault in compass.morpho.vaults().vaults
}
user_positions = compass.morpho.user_position(
    chain=chain,
    user_address=address,
).vault_positions

user_positions = [
    position for position in user_positions if position.vault.asset.symbol == "USDC"
]


st.title("Vault rebalance demo")
st.text("""Demoing rebalaning USDC over several vaults.
We are assuming all depoists are made from the same address, but that could easily be changed.
""")


cols = st.columns(3)

with cols[0]:
    st.subheader("Current State")
    for i, position in enumerate(user_positions):
        c = st.container(border=True, height=200)
        c.markdown(f"#### {position.vault.name}")
        c.text(position.vault.address)
        c.markdown(f"**{round(float(position.state.assets_usd), 2)}** USD deposits")
        c.markdown(f"**{round(float(position.vault.daily_apys.apy) * 100, 2)} %** APY")

    deposits_arr = [pos.state.assets_usd for pos in user_positions]
    vault_names = [pos.vault.name for pos in user_positions]
    vault_symbol = [position.vault.asset.name for pos in user_positions]
    trace = go.Pie(
        labels=vault_names,
        values=deposits_arr,
    )
    st.plotly_chart(go.Figure(trace))


with cols[1]:
    st.subheader("Target Distribution")
    sliders = []
    for i, position in enumerate(user_positions):
        c = st.container(border=True, height=200)
        c.markdown(f"#### {position.vault.name}")
        value = c.slider(
            key=f"slider_{position.vault.address}",
            label="Choose percentage",
            value=100 if i == 0 else 0,
        )
        sliders.append(value)

    sum = sum(sliders)
    if sum != 100:
        st.warning("Rebalance percentages need to add up to 100%")
    else:
        st.success("This is a success message!", icon="âœ…")
        bt1 = st.button("Rebalance")
        if bt1:
            st.text(
                "Here's the single transaction to rebalance all positions.\nSign this transaction with the wallet of your choice and then submit to chain."
            )
            st.code("""{
  "chain_id": 1,
  "data": "0x174dea710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000006200000000000000000000000004f460bb11cf958606c69a963b4a17f9daeeea8b60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064ba0876520000000000000000000000000000000000000000000000001b0f15140131e0b3000000000000000000000000a829b388a3df7f581ce957a95edbe419dd146d1b000000000000000000000000a829b388a3df7f581ce957a95edbe419dd146d1b0000000000000000000000000000000000000000000000000000000000000000000000000000000064964e162aa18d32f91ea5b24a09529f811aeb8e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064ba087652000000000000000000000000000000000000000000000000188b9e77690c5cab000000000000000000000000a829b388a3df7f581ce957a95edbe419dd146d1b000000000000000000000000a829b388a3df7f581ce957a95edbe419dd146d1b00000000000000000000000000000000000000000000000000000000000000000000000000000000341193ed21711472e71aeca4a942123452bd0dda0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000064ba08765200000000000000000000000000000000000000000000000032e5a79e1eba07ee000000000000000000000000a829b388a3df7f581ce957a95edbe419dd146d1b000000000000000000000000a829b388a3df7f581ce957a95edbe419dd146d1b00000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b30000000000000000000000004f460bb11cf958606c69a963b4a17f9daeeea8b6000000000000000000000000000000000000000000000000000000000022283000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b300000000000000000000000064964e162aa18d32f91ea5b24a09529f811aeb8e00000000000000000000000000000000000000000000000000000000002d8aeb00000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000044095ea7b3000000000000000000000000341193ed21711472e71aeca4a942123452bd0dda000000000000000000000000000000000000000000000000000000000022283000000000000000000000000000000000000000000000000000000000,
  "from_": "0xa829B388A3DF7f581cE957a95edbe419dd146d1B",
  "gas": 999999,
  "to": "0xa829B388A3DF7f581cE957a95edbe419dd146d1B",
  "value": 0,
  "nonce": 68,
  "max_fee_per_gas": 12370297316,
  "max_priority_fee_per_gas": 518800,
  "authorization_list": [
    {
      "nonce": 1,
      "address": "0xcA11bde05977b3631167028862bE2a173976CA11",
      "chain_id": 1,
      "r": 33527870694357127069976908757502661299880413309024825381783287539601632427506,
      "s": 38992836491079257330289091254367165068959548728858929102784540798528633418244,
      "y_parity": 1
    }
  ]
}
""")

    with cols[2]:
        st.subheader("Batched Transaction")
        st.text(
            "Below if the full code to make the rebalance happen programticallyusing the comopass SDK"
        )

        with open("./rebalance.py", "r") as f:
            t = f.read()
        t = t.split("# CODE START")[1].split("# CODE END")[0]
        t = f"target_percentages={[i / 100 for i in sliders]}\n" + t
        st.code(t)
